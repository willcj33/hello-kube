// Code generated by protoc-gen-go.
// source: color-generator.proto
// DO NOT EDIT!

/*
Package colorgen is a generated protocol buffer package.

It is generated from these files:
	color-generator.proto

It has these top-level messages:
	ColorCollection
	Color
	Settings
	Empty
*/
package colorgen

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type ColorCollection struct {
	Values []*Color `protobuf:"bytes,1,rep,name=values" json:"values,omitempty"`
}

func (m *ColorCollection) Reset()                    { *m = ColorCollection{} }
func (m *ColorCollection) String() string            { return proto.CompactTextString(m) }
func (*ColorCollection) ProtoMessage()               {}
func (*ColorCollection) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *ColorCollection) GetValues() []*Color {
	if m != nil {
		return m.Values
	}
	return nil
}

type Color struct {
	Hex string `protobuf:"bytes,1,opt,name=hex" json:"hex,omitempty"`
}

func (m *Color) Reset()                    { *m = Color{} }
func (m *Color) String() string            { return proto.CompactTextString(m) }
func (*Color) ProtoMessage()               {}
func (*Color) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Color) GetHex() string {
	if m != nil {
		return m.Hex
	}
	return ""
}

type Settings struct {
	Interval  int32 `protobuf:"varint,1,opt,name=interval" json:"interval,omitempty"`
	TileCount int32 `protobuf:"varint,2,opt,name=tileCount" json:"tileCount,omitempty"`
}

func (m *Settings) Reset()                    { *m = Settings{} }
func (m *Settings) String() string            { return proto.CompactTextString(m) }
func (*Settings) ProtoMessage()               {}
func (*Settings) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *Settings) GetInterval() int32 {
	if m != nil {
		return m.Interval
	}
	return 0
}

func (m *Settings) GetTileCount() int32 {
	if m != nil {
		return m.TileCount
	}
	return 0
}

type Empty struct {
}

func (m *Empty) Reset()                    { *m = Empty{} }
func (m *Empty) String() string            { return proto.CompactTextString(m) }
func (*Empty) ProtoMessage()               {}
func (*Empty) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func init() {
	proto.RegisterType((*ColorCollection)(nil), "colorgen.ColorCollection")
	proto.RegisterType((*Color)(nil), "colorgen.Color")
	proto.RegisterType((*Settings)(nil), "colorgen.Settings")
	proto.RegisterType((*Empty)(nil), "colorgen.Empty")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for ColorGeneratorService service

type ColorGeneratorServiceClient interface {
	GetColor(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Color, error)
}

type colorGeneratorServiceClient struct {
	cc *grpc.ClientConn
}

func NewColorGeneratorServiceClient(cc *grpc.ClientConn) ColorGeneratorServiceClient {
	return &colorGeneratorServiceClient{cc}
}

func (c *colorGeneratorServiceClient) GetColor(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Color, error) {
	out := new(Color)
	err := grpc.Invoke(ctx, "/colorgen.ColorGeneratorService/GetColor", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ColorGeneratorService service

type ColorGeneratorServiceServer interface {
	GetColor(context.Context, *Empty) (*Color, error)
}

func RegisterColorGeneratorServiceServer(s *grpc.Server, srv ColorGeneratorServiceServer) {
	s.RegisterService(&_ColorGeneratorService_serviceDesc, srv)
}

func _ColorGeneratorService_GetColor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ColorGeneratorServiceServer).GetColor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/colorgen.ColorGeneratorService/GetColor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ColorGeneratorServiceServer).GetColor(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _ColorGeneratorService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "colorgen.ColorGeneratorService",
	HandlerType: (*ColorGeneratorServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetColor",
			Handler:    _ColorGeneratorService_GetColor_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "color-generator.proto",
}

func init() { proto.RegisterFile("color-generator.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 213 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x5c, 0x8f, 0x41, 0x4f, 0x84, 0x30,
	0x10, 0x85, 0xc5, 0x0d, 0x6b, 0x77, 0x3c, 0xac, 0x69, 0xb2, 0x09, 0x6e, 0x3c, 0x6c, 0x7a, 0x91,
	0x8b, 0x3d, 0xe0, 0xcd, 0x2b, 0x1a, 0xee, 0xf0, 0x0b, 0x90, 0x4c, 0xb0, 0x49, 0xed, 0x90, 0x32,
	0x10, 0xfd, 0xf7, 0x86, 0x51, 0xd4, 0xec, 0xed, 0xf5, 0xbd, 0xd7, 0xcc, 0xf7, 0xe0, 0xd0, 0x91,
	0xa7, 0xf8, 0xd0, 0x63, 0xc0, 0xd8, 0x32, 0x45, 0x3b, 0x44, 0x62, 0xd2, 0x4a, 0xec, 0x1e, 0x83,
	0x79, 0x82, 0x7d, 0xb9, 0xe8, 0x92, 0xbc, 0xc7, 0x8e, 0x1d, 0x05, 0x7d, 0x0f, 0xdb, 0xb9, 0xf5,
	0x13, 0x8e, 0x59, 0x72, 0xda, 0xe4, 0xd7, 0xc5, 0xde, 0xae, 0x6d, 0x2b, 0xd5, 0xfa, 0x27, 0x36,
	0xb7, 0x90, 0x8a, 0xa1, 0x6f, 0x60, 0xf3, 0x86, 0x1f, 0x59, 0x72, 0x4a, 0xf2, 0x5d, 0xbd, 0x48,
	0xf3, 0x0c, 0xaa, 0x41, 0x66, 0x17, 0xfa, 0x51, 0x1f, 0x41, 0xb9, 0xc0, 0x18, 0xe7, 0xd6, 0x4b,
	0x25, 0xad, 0x7f, 0xdf, 0xfa, 0x0e, 0x76, 0xec, 0x3c, 0x96, 0x34, 0x05, 0xce, 0x2e, 0x25, 0xfc,
	0x33, 0xcc, 0x15, 0xa4, 0x2f, 0xef, 0x03, 0x7f, 0x16, 0x15, 0x1c, 0xe4, 0x52, 0xb5, 0xee, 0x68,
	0x30, 0xce, 0xae, 0x43, 0x6d, 0x41, 0x55, 0xc8, 0xdf, 0x14, 0xff, 0x38, 0xe5, 0xd7, 0xf1, 0x1c,
	0xdc, 0x5c, 0xbc, 0x6e, 0x65, 0xff, 0xe3, 0x57, 0x00, 0x00, 0x00, 0xff, 0xff, 0x2e, 0x34, 0xd7,
	0x2e, 0x18, 0x01, 0x00, 0x00,
}
